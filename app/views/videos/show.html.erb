<!-- app/views/videos/show.html.erb -->
<style>
  .btn {
    padding: 0.5em 1em;
    border: none;
    border-radius: 0.3em;
    cursor: pointer;
    display: inline-block;
    margin-top: 10px;
  }

  .btn-secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn-success {
    background-color: #28a745;
    color: white;
  }
  
  .video-title {
    font-size: 20px; 
  }
  
  .folder-selection-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px; /* エレメント間のスペース */
  }
</style>

<% if @video.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(@video.errors.count, "error") %> prohibited this video from being saved:</h2>
    <ul>
      <% @video.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<!-- 感想一覧へのリンク -->
<div class="text-center">
  <h2><%= link_to '感想一覧', reviews_path %></h2>
</div>

<!-- 検索結果ページへ戻る リンク -->
<div class="text-center">
  <p class="same-size-link">
    <%= link_to '検索結果ページへ戻る', search_videos_path(search_query: session[:last_search_query]) %>
  </p>
</div>

<!-- 検索フォームを中央寄りに配置 -->
<div class="text-center">
  <%= render 'search_form' %>
</div>

<h1 class="text-center video-title"><%= @video_details.title || @video.title %></h1>

<!-- 再生速度変更ボタン -->
<div class="playback-speed-buttons" style="text-align: center;">
  <button type="button" class="btn btn-secondary speed-button" data-speed="1">標準</button>
  <button type="button" class="btn btn-secondary speed-button" data-speed="1.25">1.25</button>
  <button type="button" class="btn btn-secondary speed-button" data-speed="1.5">1.5</button>
  <button type="button" class="btn btn-secondary speed-button" data-speed="1.75">1.75</button>
  <button type="button" class="btn btn-secondary speed-button" data-speed="2">2</button>
</div>

<div class="video-container text-center">
  <iframe id="youtube-player" width="560" height="315" src="https://www.youtube.com/embed/<%= @video_details.video_id %>?start=<%= @start_time %>&enablejsapi=1" frameborder="0" allowfullscreen></iframe>
</div>

<div class="review-form-container centered-form" style="width: 140%; margin-left: -20%; margin-right: -20%;">
  <% if @video.persisted? %>
    <%= form_with(model: [ @video, Review.new ], url: video_reviews_path(@video), local: true) do |form| %>
      <%= form.hidden_field :video_id, value: @video.id %>
      <%= form.hidden_field :play_time, id: 'review_play_time' %> <!-- play_time フィールドを追加 -->

      <!-- フォルダ選択と削除リンクを含む新しいdiv -->
      <div class="folder-selection-container" style="display: flex; align-items: center; justify-content: center; gap: 20px;">
        <div class="text-center">
          <%= form.label :folder_id, "フォルダ選択" %>
          <%= form.collection_select :folder_id, @folders, :id, :name, { include_blank: true }, { class: "folder-select", id: "review_folder_id" } %> 
        </div>

        <!-- 削除リンク -->
        <%= link_to '削除', '#', id: 'delete-folder-link', data: { method: :delete, confirm: '本当に削除しますか？' }, class: 'delete-folder-link', style: 'display: none;' %>
      </div>

      <!-- 新しいフォルダ名の入力フィールド -->
      <div class="text-center">
        <%= label_tag :new_folder_name, "新しいフォルダ名" %>
        <%= text_field_tag :new_folder_name, nil, class: 'new-folder-input' %>
      </div>

      <%= form.text_area :body, rows: 10, placeholder: "ここに感想を入力してください", class: 'review-text-area', style: 'width: 100%; height: 140%;' %> 

      <div class="voice-recognition text-center" style="margin-top: 1em;">
        <button id="start-stop-recognition" type="button" class="btn btn-secondary">音声認識を開始</button>
      </div>

      <div class="submit-button" style="margin-top: 1em; text-align: center;">
        <%= form.submit "感想を記録する", class: "btn btn-primary", style: 'font-size: 1em; width: auto;' %>
      </div>
    <% end %>
  <% end %>
</div>

<% @reviews.each do |review| %>
  <div class="review text-center">
    <p><%= review.body %></p>
    <p>
      <%= link_to 'この瞬間から見る', video_path(@video, start_time: review.play_time.to_i), target: "_blank" %>
    </p>
    <% if current_user == review.user %>
      <p>
        <%= link_to '編集', edit_video_review_path(@video, review) %> |
        <%= link_to '削除', review_path(review), data: { method: :delete, confirm: '本当に削除しますか？' }, class: 'action-link' %>
      </p>
    <% end %>
    <small>Posted on <%= review.created_at.strftime('%Y-%m-%d %H:%M:%S') %></small> 
  </div>
<% end %> 

<%= social_share_button_tag('Share to social networks') %>

<% if @review&.errors&.any? %>
  <ul>
    <% @review.errors.full_messages.each do |message| %>
      <li><%= message %></li>
    <% end %>
  </ul>
<% end %>

<!-- ページネーションリンク -->
<% if @reviews.total_pages > 1 %>
  <div class="pagination-links text-center" style="margin-top: 20px;">
    <% if @reviews.prev_page %>
      <%= link_to '前へ', video_path(@video, page: @reviews.prev_page), class: 'btn btn-secondary' %>
    <% end %>
    <% if @reviews.next_page %>
      <%= link_to '次へ', video_path(@video, page: @reviews.next_page), class: 'btn btn-secondary' %>
    <% end %>
  </div>
<% end %>

<div class="recommended-videos">
  <h3 class="text-center">おすすめの動画</h3>
  <ul>
    <% @recommended_videos.each do |video| %>
      <li class="recommended-video-item">
        <div class="recommended-thumbnail">
          <%= link_to image_tag("https://img.youtube.com/vi/#{video.video_id}/0.jpg", alt: video.title, class: "recommended-thumbnail-image"), video_path(video) %>
        </div>
        <div class="video-info"> <!-- 変更: 全ての情報を一つのdivで囲む -->
          <h3 class="video-title2"><%= link_to video.title, video_path(video) %></h3>
          <p class="video-published">公開日: <%= video.published_at ? video.published_at.to_time.strftime("%B %d, %Y") : "Not available" %></p>
          <p class="video-views">再生数: <%= number_with_delimiter(video.view_count) %></p>
          <p class="video-duration">再生時間: <%= video.duration %></p>
          <p class="video-channel">チャンネル名: <%= video.channel_title %></p>
        </div>
      </li>
    <% end %>
  </ul>
</div>

<script>
  // YouTube Player APIをロードする
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('youtube-player', {
      events: {
        'onReady': onPlayerReady
      }
    });
  }

  // YouTube Playerが準備完了した際の処理
  function onPlayerReady(event) {
    var reviewForm = document.querySelector('.review-form-container form');
    reviewForm.addEventListener('focusin', function() {
      var currentTime = player.getCurrentTime();
      var timeField = document.getElementById('review_play_time'); // play_time フィールドを取得
      timeField.value = currentTime; // 再生時間を設定
    });

    // 再生速度ボタンのイベントリスナーを設定
    var speedButtons = document.querySelectorAll('.speed-button');
    speedButtons.forEach(function(button) {
      button.addEventListener('click', function() {
        var speed = this.getAttribute('data-speed');
        player.setPlaybackRate(parseFloat(speed));

        // ボタンの色を更新
        updateButtonColors(speedButtons, this);
      });
    });
  }

  // ボタンの色を更新する関数
  function updateButtonColors(buttons, activeButton) {
    buttons.forEach(function(button) {
      button.classList.remove('btn-success');
      button.classList.add('btn-secondary');
    });
    activeButton.classList.remove('btn-secondary');
    activeButton.classList.add('btn-success');
  }
</script>

<script>
  var recognition;
  var recognizing = false;
  var finalTranscript = '';
  var reviewTextArea = document.querySelector('.review-text-area'); // 感想入力フォームを取得

  document.getElementById('start-stop-recognition').onclick = function() {
    if (!recognition) {
      initializeRecognition();
    }

    if (recognizing) {
      recognition.stop();
      return;
    }
    finalTranscript = '';
    recognition.lang = 'ja-JP';
    recognition.start();
  };

  function initializeRecognition() {
    if (!('webkitSpeechRecognition' in window)) {
      alert("お使いのブラウザでは音声認識がサポートされていません。");
    } else {
      recognition = new webkitSpeechRecognition();
      recognition.continuous = true;
      recognition.interimResults = true;

      recognition.onstart = function() {
        recognizing = true;
        var button = document.getElementById('start-stop-recognition');
        button.innerText = '音声認識を停止';
        button.classList.remove('btn-secondary');
        button.classList.add('btn-success');
        reviewTextArea.focus(); // 感想入力フォームにフォーカスを当てる
      };

      recognition.onerror = function(event) {
        console.error('音声認識エラー:', event.error);
        alert('音声認識エラー: ' + event.error);
      };

      recognition.onend = function() {
        recognizing = false;
        var button = document.getElementById('start-stop-recognition');
        button.innerText = '音声認識を開始';
        button.classList.remove('btn-success');
        button.classList.add('btn-secondary');
        reviewTextArea.blur(); // 感想入力フォームのフォーカスを解除
      };

      recognition.onresult = function(event) {
        var interimTranscript = '';
        for (var i = event.resultIndex; i < event.results.length; ++i) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          } else {
            interimTranscript += event.results[i][0].transcript;
          }
        }
        reviewTextArea.value = finalTranscript + interimTranscript;
      };
    }
  }
</script>

<script>
  function setupFolderSelect() {
    const folderSelect = document.getElementById('review_folder_id');
    const deleteLink = document.getElementById('delete-folder-link');

    folderSelect.addEventListener('change', function() {
      const selectedFolderId = this.value;
      if (selectedFolderId) {
        deleteLink.href = `/folders/${selectedFolderId}`;
        deleteLink.style.display = 'inline';
      } else {
        deleteLink.style.display = 'none';
      }
    });
  }

  document.addEventListener('turbo:load', setupFolderSelect);

  // DELETEリクエストを処理するJavaScriptコードを追加
  function setupDeleteLinks() {
    document.querySelectorAll('a[data-method="delete"]').forEach(function(link) {
      link.addEventListener('click', function(event) {
        event.preventDefault();
        const message = link.getAttribute('data-confirm');
        if (!message || confirm(message)) {
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = link.href;

          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = '_method';
          hiddenInput.value = 'delete';
          form.appendChild(hiddenInput);

          const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
          const csrfParam = document.querySelector('meta[name="csrf-param"]').getAttribute('content');

          const csrfInput = document.createElement('input');
          csrfInput.type = 'hidden';
          csrfInput.name = csrfParam;
          csrfInput.value = csrfToken;
          form.appendChild(csrfInput);

          document.body.appendChild(form);
          form.submit();
        }
      });
    });
  }

  document.addEventListener('turbo:load', setupDeleteLinks);
  document.addEventListener('DOMContentLoaded', setupDeleteLinks);
</script>
