<h1>Your Favorites</h1>

<!-- 検索フォームを追加 -->
<form id="search-form">
  <input type="text" id="search-keyword" placeholder="Search...">
  <button type="submit">Search</button>
</form>

<!-- ソートオプションのドロップダウンメニューを追加 -->
<div id="sort-container">
  <label for="sort-options">Sort by:</label>
  <select id="sort-options">
    <option value="uploaded-date">アップロード日</option>
    <option value="favorite-date">お気に入り登録日</option>
  </select>
</div>

<!-- お気に入り動画のリスト -->
<ul id="video-list"></ul>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    let favorites;

    async function fetchFavorites(keyword = '') {
      const response = await fetch(`/api/favorites/search?keyword=${keyword}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      favorites = await response.json();
      const videoListContainer = document.getElementById('video-list');
      videoListContainer.innerHTML = '';
      favorites.forEach(renderFavorite);
    }

    try {
      await fetchFavorites();

      document.getElementById('sort-options').addEventListener('change', (event) => {
        const sortOption = event.target.value;
        const sortedFavorites = sortFavorites(favorites, sortOption);
        const videoListContainer = document.getElementById('video-list');
        videoListContainer.innerHTML = '';
        sortedFavorites.forEach(renderFavorite);
      });

      const form = document.getElementById("search-form");
      form.addEventListener("submit", async function(e) {
        e.preventDefault();
        const keyword = document.getElementById("search-keyword").value;
        await fetchFavorites(keyword);
      });
    } catch (error) {
      console.error('There was a problem with the fetch operation:', error);
    }
  });

  function sortFavorites(favorites, sortOption) {
    if(sortOption === 'uploaded-date') {
      return favorites.sort((a, b) => new Date(b.video.uploaded_date) - new Date(a.video.uploaded_date));
    }
    if(sortOption === 'favorite-date') {
      return favorites.sort((a, b) => new Date(b.favorite_date) - new Date(a.favorite_date));
    }
    return favorites;
  }

  function renderFavorite(favorite) {
    const videoListContainer = document.getElementById('video-list');
    const videoItem = document.createElement('li');
    videoItem.dataset.videoId = favorite.video.id;

    const thumbnail = document.createElement('img');
    thumbnail.src = favorite.video.thumbnail_url;
    thumbnail.alt = `${favorite.video.title} thumbnail`;
    videoItem.appendChild(thumbnail);

    const titleLink = document.createElement('a');
    titleLink.href = `/videos/${favorite.video.id}`; // 追加された部分
    titleLink.textContent = favorite.video.title;
    videoItem.appendChild(titleLink); // 追加された部分

    const memoInput = document.createElement('input');
    memoInput.type = 'text';
    memoInput.className = 'memo-input';
    memoInput.placeholder = 'メモを入力';
    memoInput.value = favorite.memo || '';
    videoItem.appendChild(memoInput);

    const saveButton = document.createElement('button');
    saveButton.textContent = '保存';
    saveButton.className = 'save-button';
    videoItem.appendChild(saveButton);

    const deleteButton = document.createElement('button');
    deleteButton.textContent = '削除';
    deleteButton.className = 'delete-button';
    deleteButton.addEventListener('click', function() {
      if (window.confirm('この動画をお気に入りから削除してよろしいですか？')) {
        fetch(`/favorite_videos/${favorite.video.id}/delete`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            'Content-Type': 'application/json',
          }
        })
        .then((response) => {
          if (response.ok) {
            videoItem.remove();
          } else {
            alert('削除に失敗しました');
          }
        });
      }
    });
    videoItem.appendChild(deleteButton);

    videoListContainer.appendChild(videoItem);
  }

  function saveMemo(videoId, newMemo) {
    fetch('/api/save-memo', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ videoId, newMemo }),
    })
    .then((response) => response.json())
    .then((data) => {
      if (data.success) {
        alert('メモが保存されました！');
      } else {
        alert('エラーが発生しました。再試行してください。');
      }
    })
    .catch((error) => {
      alert('通信エラーが発生しました。');
    });
  }
</script>
